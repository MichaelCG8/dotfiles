# shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$HOME/.dotfiles

export XDG_CONFIG_HOME=$HOME/.config

# Set default terminal editor
if command -v nvim &> /dev/null; then
  # export EDITOR=$(command -v nvim)
  export EDITOR=nvim
elif command -v vim &> /dev/null; then
  export EDITOR=vim
fi

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
# typeset -U makes the config_files variable only keep the first of duplicate values when an array.
typeset -U config_files
# Recursively find .zsh files at any depth starting from $DOTFILES
config_files=($DOTFILES/**/*.zsh)

# load the path files
# ${name:#pattern} filters out matching patterns.
# The (M) flag keeps only the matching patterns.
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
# https://stackoverflow.com/questions/30840651/what-does-autoload-do-in-zsh
# https://www.csse.uwa.edu.au/programming/linux/zsh-doc/zsh_23.html
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
# Looks like this makes your history work a bit like when you press up/down in ipython. Seems worthwhile to uncomment some day.
# autoload -U up-line-or-beginning-search
# autoload -U down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search
# bindkey "^[[A" up-line-or-beginning-search # Up
# bindkey "^[[B" down-line-or-beginning-search # Down

# Allows up/down arrows to search history based on what is already entered.
# https://unix.stackexchange.com/a/97844/394372
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[[A" history-beginning-search-backward-end
bindkey "^[[B" history-beginning-search-forward-end

# Add a newline before the prompt. Putting a newline character directly in the prompt causes redraw issues.
# https://stackoverflow.com/a/20615683
precmd() { print "" }
PS1="%(?.%F{green}âˆš.%F{red}?%?)%f %D{%Y/%m/%d %H:%M:%S} %F{cyan}%m%f %B%F{blue}%2~%f%b"$'\n'"%# "

[ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh
export FZF_DEFAULT_OPS="--extended"

source $HOME/.zconda_init
